apiVersion: apps/v1
kind: Deployment
metadata:
  name:  nginx-deploy
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  minReadySeconds: 5     # 新建的 Pod 在没有任何容器崩溃的情况下就绪并被系统视为可用的最短秒数
  strategy:
    type: RollingUpdate  # 取值可以是 Recreate 或 RollingUpdate 默认为 RollingUpdate
    rollingUpdate:
      maxSurge: 1        # 升级过程中最多可以比原先设置多出的 Pod 数量
      maxUnavailable: 1  # 表示升级过程中最多有多少个 Pod 处于无法提供服务的状态
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80

# minReadySeconds：
#  表示 Kubernetes 在等待设置的时间后才进行升级，如果没有设置该值，Kubernetes 会假设该容器启动起来后就提供服务了，如果没有设置该值，在某些极端情况下可能会造成服务不正常运行，默认值就是0。

# type=RollingUpdate：
#  表示设置更新策略为滚动更新，可以设置为Recreate和RollingUpdate两个值，Recreate表示全部重新创建，默认值就是RollingUpdate。

# maxSurge：
#  表示升级过程中最多可以比原先设置多出的 Pod 数量，例如：maxSurage=1，replicas=5，就表示Kubernetes 会先启动一个新的 Pod，然后才删掉一个旧的 Pod，整个升级过程中最多会有5+1个 Pod。

# maxUnavaible：
#  表示升级过程中最多有多少个 Pod 处于无法提供服务的状态，当maxSurge不为0时，该值也不能为0，例如：maxUnavaible=1，则表示 Kubernetes 整个升级过程中最多会有1个 Pod 处于无法服务的状态。



# update
# kubectl set image deployment/nginx-deploy nginx=nginx:1.9.1
# or
# kubectl edit deployment/nginx-deploy


# rollback
# kubectl rollout history deployment/nginx-deploy
# kubectl rollout history deployment/nginx-deploy --revision=3
# kubectl rollout undo deployment/nginx-deploy
# kubectl rollout undo deployment/nginx-deploy --to-revision=2


# pause and resume
# kubectl rollout pause deployment/nginx-deploy
# kubectl set image deploy/nginx-deploy nginx=nginx:1.9.1
# kubectl rollout history deploy/nginx-deploy
# kubectl set resources deployment nginx-deploy -c=nginx --limits=cpu=200m,memory=512Mi
# kubectl rollout resume deploy nginx-deploy